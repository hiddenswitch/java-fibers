plugins {
  id 'java-library'
  id 'maven-publish'
  id 'com.github.johnrengelman.shadow' version "7.0.0"
}

group 'com.hiddenswitch.fibers'
version '10.0.0'

def vendor = "Hidden Switch, Inc."
def moduleName = 'co.paralleluniverse.quasar.core'

repositories {
  mavenLocal()
  maven { url "https://oss.sonatype.org/content/repositories/releases" }
  maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

sourceCompatibility = '11'
targetCompatibility = '11'

configurations {
  timewarp
  jmh.extendsFrom testImplementation
  classloadertest.extendsFrom testImplementation
  shadowedJar.extendsFrom runtime

  uninstrumentedClasspath {
    canBeConsumed = false
    canBeResolved = true
    extendsFrom runtime
  }

  uninstrumentedJars {
    canBeConsumed = true
    canBeResolved = false
  }
}


configurations.all {
  resolutionStrategy {
    failOnVersionConflict()
  }
}

sourceSets {
  main {
    resources {
      srcDir('src/main/suspendables')
    }
  }
  jmh {
    compileClasspath += sourceSets.main.output + sourceSets.test.output
    runtimeClasspath += sourceSets.main.output + sourceSets.test.output
  }
  classloadertest {
    compileClasspath += sourceSets.main.output + sourceSets.test.output
    runtimeClasspath += sourceSets.main.output + sourceSets.test.output
  }
}

dependencies {
  implementation 'org.slf4j:slf4j-api:1.7.30'

  compileOnly("io.dropwizard.metrics:metrics-core:4.1.9") {
    exclude group: 'org.slf4j', module: '*'
  }

  compileOnly 'io.dropwizard.metrics:metrics-jmx:4.1.9'
  compileOnly 'io.micrometer:micrometer-core:1.5.1'

  compileOnly "org.apache.ant:ant:1.10.9"
  testImplementation "org.apache.ant:ant:1.10.9"

  implementation 'com.google.errorprone:error_prone_annotations:2.4.0'
  implementation("com.google.guava:guava:26.+") {
    exclude group: 'com.google.errorprone', module: '*'
    exclude group: 'org.checkerframework', module: 'checker-qual'
  }
  timewarp 'co.paralleluniverse:timewarp:0.2.0-SNAPSHOT'
  testImplementation 'co.paralleluniverse:timewarp:0.2.0-SNAPSHOT'
  testImplementation 'org.hamcrest:hamcrest:2.2'
  testImplementation('junit:junit:4.12') {
    exclude group: 'org.hamcrest', module: '*'
  }
  testImplementation('com.google.truth:truth:0.42') {
    exclude group: 'com.google.guava', module: 'guava'
    exclude group: 'com.google.errorprone', module: '*'
    exclude group: 'junit', module: 'junit'
  }

  testImplementation('org.mockito:mockito-core:3.12.4') {
    exclude group: "org.ow2.asm", module: '*'
    exclude group: "net.bytebuddy", module: '*'
  }

  testRuntimeOnly "net.bytebuddy:byte-buddy:1.11.13" // for Mockito
  testImplementation "org.ow2.asm:asm:$asmVer"

  jmhImplementation 'org.openjdk.jmh:jmh-core:1.21'
  jmhImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.21'

  annotationProcessor 'org.kohsuke.metainf-services:metainf-services:1.8'

  implementation("org.hdrhistogram:HdrHistogram:2.1.+") {
    exclude group: 'org.slf4j', module: '*'
  }
  implementation("org.latencyutils:LatencyUtils:2.0.3") {
    exclude group: "org.hdrhistogram", module: '*'
  }

  // Will be shadowed
  implementation "org.ow2.asm:asm:$asmVer"
  implementation "org.ow2.asm:asm-analysis:$asmVer"
  implementation "org.ow2.asm:asm-commons:$asmVer"
  implementation "org.ow2.asm:asm-util:$asmVer"

  // Test utilities
  compileOnly('junit:junit:4.12') {
    exclude group: 'org.hamcrest', module: '*'
  }
}

processResources.dependsOn compileJava
compileJava {
  options.warnings = false;

  options.compilerArgs << '-Xlint:none'
  options.compilerArgs << '-nowarn' // same as '-Xlint:none'

  // Turn them off manually
  options.compilerArgs << '-Xlint:-auxiliaryclass'
  options.compilerArgs << '-Xlint:-cast'
  options.compilerArgs << '-Xlint:-classfile'
  options.compilerArgs << '-Xlint:-deprecation'
  options.compilerArgs << '-Xlint:-dep-ann'
  options.compilerArgs << '-Xlint:-divzero'
  options.compilerArgs << '-Xlint:-empty'
  options.compilerArgs << '-Xlint:-fallthrough'
  options.compilerArgs << '-Xlint:-finally'
  options.compilerArgs << '-Xlint:-options'
  options.compilerArgs << '-Xlint:-overloads'
  options.compilerArgs << '-Xlint:-overrides'
  options.compilerArgs << '-Xlint:-path'
  options.compilerArgs << '-Xlint:-processing'
  options.compilerArgs << '-Xlint:-rawtypes'
  options.compilerArgs << '-Xlint:-serial'
  options.compilerArgs << '-Xlint:-static'
  options.compilerArgs << '-Xlint:-try'
  options.compilerArgs << '-Xlint:-unchecked'
  options.compilerArgs << '-Xlint:-varargs'

  outputs.file('src/main/suspendables/META-INF/suspendable-supers')
  doLast {
    scanAndInstrument(sourceSets.main, [configurations.runtimeClasspath, configurations.compileClasspath])
  }
}

task uninstrumentedCompileJava(type: JavaCompile) {
  exclude '**/module-info.java'
  source(sourceSets.main.java)
  classpath = compileJava.classpath
  destinationDir(layout.buildDirectory.dir('/uninstrumentedClasses/java/main').get().asFile)
}

task uninstrumentedJar(type: org.gradle.jvm.tasks.Jar) {
  dependsOn uninstrumentedCompileJava
  from { uninstrumentedCompileJava.destinationDir }
  archiveClassifier.set('uninstrumented')
}

test {
  dependsOn = [shadowJar, compileClassloadertestJava]
  useJUnit()

  systemProperty 'co.paralleluniverse.monitoring.flightRecorderLevel', '5'
  systemProperty 'co.paralleluniverse.globalFlightRecorder', 'true'
  systemProperty 'co.paralleluniverse.flightRecorderDumpFile', 'quasar.log'
  systemProperty 'co.paralleluniverse.monitoring.flightRecorderSize', '200000'

  jvmArgs "-javaagent:${shadowJar.outputs.files.singleFile}" // =vdmc (verbose, debug, allow monitors, check class)
  jvmArgs "-Xbootclasspath/a:${configurations.timewarp.singleFile}"
  if (System.getenv("TRAVIS") == 'true') {
    jvmArgs "-javaagent:${configurations.timewarp.singleFile}=3" // slow clock down x3
  }
  jvmArgs "-Xmx1024m"
}

// remove default artifact
configurations.runtime.artifacts.with { archives ->
  archives.each {
    archives.remove(it)
  }
}

def shadowedJarArtifact = artifacts.add('shadowedJar', shadowJar.archiveFile) {
  builtBy shadowJar
  classifier = ''
}

def uninstrumentedJarArtifact = artifacts.add('uninstrumentedJars', uninstrumentedJar.archiveFile) {
  builtBy uninstrumentedJar
  classifier = 'uninstrumented'
}

shadowJar {
  from sourceSets.main.output
  configurations = [project.configurations.runtimeClasspath]
  exclude 'META-INF/INDEX.LIST'
  relocate 'org.objectweb.asm.', 'co.paralleluniverse.asm.'

  manifest {
    attributes(
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor": vendor,
            "Automatic-Module-Name": moduleName,
            "Premain-Class": "co.paralleluniverse.fibers.instrument.JavaAgent",
            "Agent-Class": "co.paralleluniverse.fibers.instrument.JavaAgent",
            "Can-Retransform-Classes": "true",
            "Can-Redefine-Classes": "true",
            "Built-By": System.getProperty("user.name"),
    )
  }
}

task install {
  dependsOn 'publishAllPublicationToMavenLocal'
}

configure(javadoc) {
  classpath += configurations.compileOnly

  options {
    addStringOption('Xdoclint:none', '-quiet')
  }
}

def scanAndInstrument(SourceSet sourceSet, List<Configuration> configs) {
  def classpath = '' + sourceSet.output.classesDirs.asPath + ':' + sourceSet.output.resourcesDir + ':' + configs*.asPath.join(':') + ':' + sourceSet.resources.srcDirs*.path.join(':')

  ant.taskdef(
          name: 'scanSuspendables', classname: 'co.paralleluniverse.fibers.instrument.SuspendablesScanner',
          classpath: classpath)
  ant.scanSuspendables(
          auto: true,
          supersFile: "${sourceSet.resources.srcDirs.find { it.name.contains('suspendable') }}/META-INF/suspendable-supers",
          append: false) {
    fileset(dir: sourceSet.output.classesDirs.asPath)
  }

  ant.taskdef(name: 'instrumentation', classname: 'co.paralleluniverse.fibers.instrument.InstrumentationTask',
          classpath: classpath)
  ant.instrumentation(check: 'true') {
    fileset(dir: sourceSet.output.classesDirs.asPath) {
      exclude(name: 'co/paralleluniverse/fibers/instrument/*.class')
    }
  }
}

publishing {
  publications {
    all(MavenPublication) {
      artifact shadowedJarArtifact
    }
    uninstrumented(MavenPublication) {
      artifact uninstrumentedJarArtifact
    }
  }
}